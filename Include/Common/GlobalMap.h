#pragma once

#include "Common/FragmentTypes.h"
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <memory>

namespace Chtl {

/**
 * 模板类型枚举
 */
enum class TemplateType {
    STYLE_TEMPLATE,     // [Template] @Style
    ELEMENT_TEMPLATE,   // [Template] @Element  
    VAR_TEMPLATE,       // [Template] @Var
    CUSTOM_STYLE,       // [Custom] @Style
    CUSTOM_ELEMENT,     // [Custom] @Element
    CUSTOM_VAR          // [Custom] @Var
};

/**
 * 模板定义
 */
struct TemplateDefinition {
    TemplateType Type;
    std::string Name;
    std::string Content;
    SourceLocation Location;
    std::vector<std::string> Dependencies;  // 继承的模板
    std::unordered_map<std::string, std::string> Properties;  // 属性映射
};

/**
 * 变量组定义 
 */
struct VariableGroup {
    std::string Name;
    std::unordered_map<std::string, std::string> Variables;
    SourceLocation Location;
};

/**
 * 命名空间定义
 */
struct NamespaceDefinition {
    std::string Name;
    std::vector<std::string> ParentNamespaces;  // 嵌套命名空间
    std::unordered_set<std::string> Constraints;  // except约束
    SourceLocation Location;
};

/**
 * CHTL JS虚对象定义
 */
struct VirtualObjectDefinition {
    std::string Name;
    std::unordered_map<std::string, std::string> Methods;  // 方法名 -> 函数内容
    SourceLocation Location;
};

/**
 * 事件委托注册信息
 */
struct DelegateRegistration {
    std::string ParentSelector;
    std::vector<std::string> TargetSelectors;
    std::unordered_map<std::string, std::string> EventHandlers;  // 事件类型 -> 处理函数
    SourceLocation Location;
};

/**
 * 全局映射表 - 管理CHTL编译过程中的所有全局状态
 */
class GlobalMap {
public:
    GlobalMap();
    ~GlobalMap() = default;
    
    // === 模板管理 ===
    void RegisterTemplate(const std::string& name, const TemplateDefinition& definition);
    const TemplateDefinition* GetTemplate(const std::string& name) const;
    bool HasTemplate(const std::string& name) const;
    std::vector<std::string> GetAllTemplateNames() const;
    
    // === 变量组管理 ===
    void RegisterVariableGroup(const std::string& name, const VariableGroup& group);
    const VariableGroup* GetVariableGroup(const std::string& name) const;
    bool HasVariableGroup(const std::string& name) const;
    std::string ResolveVariable(const std::string& groupName, const std::string& varName) const;
    
    // === 命名空间管理 ===
    void PushNamespace(const NamespaceDefinition& ns);
    void PopNamespace();
    std::string GetCurrentNamespace() const;
    std::string GetFullyQualifiedName(const std::string& name) const;
    bool IsConstrainedInCurrentNamespace(const std::string& item) const;
    
    // === CSS类名和ID管理 ===
    void RegisterAutoGeneratedClass(const std::string& className, const std::string& elementId);
    void RegisterAutoGeneratedId(const std::string& idName, const std::string& elementId);
    std::string GetElementForClass(const std::string& className) const;
    std::string GetElementForId(const std::string& idName) const;
    
    // === 全局样式收集 ===
    void AddGlobalStyle(const std::string& selector, const std::string& cssContent);
    std::string GetAllGlobalStyles() const;
    
    // === CHTL JS虚对象管理 ===
    void RegisterVirtualObject(const std::string& name, const VirtualObjectDefinition& definition);
    const VirtualObjectDefinition* GetVirtualObject(const std::string& name) const;
    bool HasVirtualObject(const std::string& name) const;
    std::string GenerateVirtualObjectFunction(const std::string& objName, const std::string& methodName) const;
    
    // === 事件委托管理 ===
    void RegisterDelegate(const DelegateRegistration& delegation);
    std::vector<DelegateRegistration> GetDelegatesForParent(const std::string& parentSelector) const;
    std::string GenerateDelegationScript() const;
    
    // === 增强选择器解析 ===
    std::string ResolveEnhancedSelector(const std::string& selector) const;
    bool IsValidEnhancedSelector(const std::string& selector) const;
    
    // === 配置管理 ===
    void SetConfiguration(const std::string& key, const std::string& value);
    std::string GetConfiguration(const std::string& key) const;
    int GetIndexInitialCount() const;
    bool IsDebugMode() const;
    bool IsNameGroupDisabled() const;
    
    // === 导入管理 ===
    void RegisterImport(const std::string& type, const std::string& path, const std::string& alias = "");
    std::vector<std::string> GetImportedFiles() const;
    std::string ResolveImportAlias(const std::string& name) const;
    
    // === 工具方法 ===
    void Clear();
    std::string GetDebugInfo() const;
    size_t GetTotalRegistrations() const;

private:
    // 模板存储
    std::unordered_map<std::string, TemplateDefinition> Templates_;
    
    // 变量组存储
    std::unordered_map<std::string, VariableGroup> VariableGroups_;
    
    // 命名空间栈
    std::vector<NamespaceDefinition> NamespaceStack_;
    
    // CSS类名和ID映射
    std::unordered_map<std::string, std::string> ClassToElementMap_;
    std::unordered_map<std::string, std::string> IdToElementMap_;
    
    // 全局样式收集
    std::vector<std::pair<std::string, std::string>> GlobalStyles_;  // selector -> content
    
    // CHTL JS虚对象
    std::unordered_map<std::string, VirtualObjectDefinition> VirtualObjects_;
    
    // 事件委托注册表
    std::vector<DelegateRegistration> DelegateRegistrations_;
    
    // 配置映射
    std::unordered_map<std::string, std::string> Configurations_;
    
    // 导入映射
    std::unordered_map<std::string, std::string> ImportAliases_;
    std::vector<std::string> ImportedFiles_;
    
    // 内部方法
    std::string ResolveTemplateInheritance(const std::string& templateName) const;
    std::string ProcessVariableSubstitution(const std::string& content) const;
    bool ValidateEnhancedSelectorSyntax(const std::string& selector) const;
    std::string GenerateUniqueClassName(const std::string& baseName) const;
    std::string GenerateUniqueId(const std::string& baseName) const;
};

/**
 * 全局映射表单例访问器
 */
class GlobalMapInstance {
public:
    static GlobalMap& GetInstance();
    static void ResetInstance();

private:
    static std::unique_ptr<GlobalMap> Instance_;
};

} // namespace Chtl