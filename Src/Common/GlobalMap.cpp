#include "Common/GlobalMap.h"
#include <sstream>
#include <algorithm>

namespace Chtl {

// === GlobalMap实现 ===

GlobalMap::GlobalMap() {
    // 设置默认配置
    SetConfiguration("INDEX_INITIAL_COUNT", "0");
    SetConfiguration("DEBUG_MODE", "false");
    SetConfiguration("DISABLE_NAME_GROUP", "false");
    SetConfiguration("DISABLE_CUSTOM_ORIGIN_TYPE", "false");
}

void GlobalMap::RegisterTemplate(const std::string& name, const TemplateDefinition& definition) {
    Templates_[name] = definition;
}

const TemplateDefinition* GlobalMap::GetTemplate(const std::string& name) const {
    auto it = Templates_.find(name);
    return (it != Templates_.end()) ? &it->second : nullptr;
}

bool GlobalMap::HasTemplate(const std::string& name) const {
    return Templates_.find(name) != Templates_.end();
}

std::vector<std::string> GlobalMap::GetAllTemplateNames() const {
    std::vector<std::string> names;
    for (const auto& pair : Templates_) {
        names.push_back(pair.first);
    }
    return names;
}

void GlobalMap::RegisterVariableGroup(const std::string& name, const VariableGroup& group) {
    VariableGroups_[name] = group;
}

const VariableGroup* GlobalMap::GetVariableGroup(const std::string& name) const {
    auto it = VariableGroups_.find(name);
    return (it != VariableGroups_.end()) ? &it->second : nullptr;
}

bool GlobalMap::HasVariableGroup(const std::string& name) const {
    return VariableGroups_.find(name) != VariableGroups_.end();
}

std::string GlobalMap::ResolveVariable(const std::string& groupName, const std::string& varName) const {
    auto group = GetVariableGroup(groupName);
    if (!group) return "";
    
    auto it = group->Variables.find(varName);
    return (it != group->Variables.end()) ? it->second : "";
}

void GlobalMap::PushNamespace(const NamespaceDefinition& ns) {
    NamespaceStack_.push_back(ns);
}

void GlobalMap::PopNamespace() {
    if (!NamespaceStack_.empty()) {
        NamespaceStack_.pop_back();
    }
}

std::string GlobalMap::GetCurrentNamespace() const {
    if (NamespaceStack_.empty()) return "";
    
    std::ostringstream oss;
    for (size_t i = 0; i < NamespaceStack_.size(); ++i) {
        if (i > 0) oss << ".";
        oss << NamespaceStack_[i].Name;
    }
    return oss.str();
}

std::string GlobalMap::GetFullyQualifiedName(const std::string& name) const {
    std::string currentNs = GetCurrentNamespace();
    if (currentNs.empty()) return name;
    return currentNs + "." + name;
}

bool GlobalMap::IsConstrainedInCurrentNamespace(const std::string& item) const {
    if (NamespaceStack_.empty()) return false;
    
    const auto& currentNs = NamespaceStack_.back();
    return currentNs.Constraints.find(item) != currentNs.Constraints.end();
}

void GlobalMap::RegisterAutoGeneratedClass(const std::string& className, const std::string& elementId) {
    ClassToElementMap_[className] = elementId;
}

void GlobalMap::RegisterAutoGeneratedId(const std::string& idName, const std::string& elementId) {
    IdToElementMap_[idName] = elementId;
}

std::string GlobalMap::GetElementForClass(const std::string& className) const {
    auto it = ClassToElementMap_.find(className);
    return (it != ClassToElementMap_.end()) ? it->second : "";
}

std::string GlobalMap::GetElementForId(const std::string& idName) const {
    auto it = IdToElementMap_.find(idName);
    return (it != IdToElementMap_.end()) ? it->second : "";
}

void GlobalMap::AddGlobalStyle(const std::string& selector, const std::string& cssContent) {
    GlobalStyles_.emplace_back(selector, cssContent);
}

std::string GlobalMap::GetAllGlobalStyles() const {
    std::ostringstream oss;
    for (const auto& style : GlobalStyles_) {
        oss << style.first << " {\n" << style.second << "\n}\n\n";
    }
    return oss.str();
}

void GlobalMap::RegisterVirtualObject(const std::string& name, const VirtualObjectDefinition& definition) {
    VirtualObjects_[name] = definition;
}

const VirtualObjectDefinition* GlobalMap::GetVirtualObject(const std::string& name) const {
    auto it = VirtualObjects_.find(name);
    return (it != VirtualObjects_.end()) ? &it->second : nullptr;
}

bool GlobalMap::HasVirtualObject(const std::string& name) const {
    return VirtualObjects_.find(name) != VirtualObjects_.end();
}

std::string GlobalMap::GenerateVirtualObjectFunction(const std::string& objName, const std::string& methodName) const {
    auto obj = GetVirtualObject(objName);
    if (!obj) return "";
    
    auto it = obj->Methods.find(methodName);
    if (it == obj->Methods.end()) return "";
    
    // 生成全局函数名
    return objName + "_" + methodName + "_" + std::to_string(std::hash<std::string>{}(objName + methodName));
}

void GlobalMap::RegisterDelegate(const DelegateRegistration& delegation) {
    DelegateRegistrations_.push_back(delegation);
}

std::vector<DelegateRegistration> GlobalMap::GetDelegatesForParent(const std::string& parentSelector) const {
    std::vector<DelegateRegistration> result;
    for (const auto& delegation : DelegateRegistrations_) {
        if (delegation.ParentSelector == parentSelector) {
            result.push_back(delegation);
        }
    }
    return result;
}

std::string GlobalMap::GenerateDelegationScript() const {
    std::ostringstream oss;
    
    // 按父选择器分组，避免重复绑定
    std::unordered_map<std::string, std::vector<DelegateRegistration>> groupedDelegations;
    for (const auto& delegation : DelegateRegistrations_) {
        groupedDelegations[delegation.ParentSelector].push_back(delegation);
    }
    
    for (const auto& group : groupedDelegations) {
        oss << "// 事件委托: " << group.first << "\n";
        oss << "document.querySelector('" << group.first << "').addEventListener('click', function(e) {\n";
        
        for (const auto& delegation : group.second) {
            for (const auto& target : delegation.TargetSelectors) {
                oss << "  if (e.target.matches('" << target << "')) {\n";
                for (const auto& handler : delegation.EventHandlers) {
                    oss << "    // " << handler.first << " 事件处理\n";
                    oss << "    (" << handler.second << ")(e);\n";
                }
                oss << "  }\n";
            }
        }
        
        oss << "});\n\n";
    }
    
    return oss.str();
}

std::string GlobalMap::ResolveEnhancedSelector(const std::string& selector) const {
    if (selector.length() < 4 || selector.substr(0, 2) != "{{" || selector.substr(selector.length() - 2) != "}}") {
        return selector;
    }
    
    std::string content = selector.substr(2, selector.length() - 4);
    
    // 根据文档规则解析增强选择器
    if (content.empty()) return "";
    
    // 如果是纯标签名，先检查是否有对应的类名或ID
    if (content.find('.') == std::string::npos && content.find('#') == std::string::npos && content.find('[') == std::string::npos) {
        // 先查找ID，再查找类名
        std::string elementId = GetElementForId(content);
        if (!elementId.empty()) {
            return "#" + content;
        }
        
        std::string elementClass = GetElementForClass(content);
        if (!elementClass.empty()) {
            return "." + content;
        }
        
        // 否则作为标签选择器
        return content;
    }
    
    return content;
}

bool GlobalMap::IsValidEnhancedSelector(const std::string& selector) const {
    std::string content = selector.substr(2, selector.length() - 4);
    
    // 根据文档，增强选择器支持：
    // - tag
    // - .class
    // - #id  
    // - .class tag
    // - tag[index]
    // 不支持交集选择器等复杂语法
    
    return !content.empty() && content.find("{{") == std::string::npos && content.find("}}") == std::string::npos;
}

void GlobalMap::SetConfiguration(const std::string& key, const std::string& value) {
    Configurations_[key] = value;
}

std::string GlobalMap::GetConfiguration(const std::string& key) const {
    auto it = Configurations_.find(key);
    return (it != Configurations_.end()) ? it->second : "";
}

int GlobalMap::GetIndexInitialCount() const {
    std::string value = GetConfiguration("INDEX_INITIAL_COUNT");
    return value.empty() ? 0 : std::stoi(value);
}

bool GlobalMap::IsDebugMode() const {
    return GetConfiguration("DEBUG_MODE") == "true";
}

bool GlobalMap::IsNameGroupDisabled() const {
    return GetConfiguration("DISABLE_NAME_GROUP") == "true";
}

void GlobalMap::RegisterImport(const std::string& type, const std::string& path, const std::string& alias) {
    ImportedFiles_.push_back(path);
    if (!alias.empty()) {
        ImportAliases_[alias] = path;
    }
}

std::vector<std::string> GlobalMap::GetImportedFiles() const {
    return ImportedFiles_;
}

std::string GlobalMap::ResolveImportAlias(const std::string& name) const {
    auto it = ImportAliases_.find(name);
    return (it != ImportAliases_.end()) ? it->second : "";
}

void GlobalMap::Clear() {
    Templates_.clear();
    VariableGroups_.clear();
    NamespaceStack_.clear();
    ClassToElementMap_.clear();
    IdToElementMap_.clear();
    GlobalStyles_.clear();
    VirtualObjects_.clear();
    DelegateRegistrations_.clear();
    ImportAliases_.clear();
    ImportedFiles_.clear();
    
    // 重置默认配置
    Configurations_.clear();
    SetConfiguration("INDEX_INITIAL_COUNT", "0");
    SetConfiguration("DEBUG_MODE", "false");
    SetConfiguration("DISABLE_NAME_GROUP", "false");
    SetConfiguration("DISABLE_CUSTOM_ORIGIN_TYPE", "false");
}

std::string GlobalMap::GetDebugInfo() const {
    std::ostringstream oss;
    oss << "GlobalMap Debug Info:\n";
    oss << "  Templates: " << Templates_.size() << "\n";
    oss << "  Variable Groups: " << VariableGroups_.size() << "\n";
    oss << "  Namespace Stack Depth: " << NamespaceStack_.size() << "\n";
    oss << "  Global Styles: " << GlobalStyles_.size() << "\n";
    oss << "  Virtual Objects: " << VirtualObjects_.size() << "\n";
    oss << "  Delegate Registrations: " << DelegateRegistrations_.size() << "\n";
    oss << "  Imported Files: " << ImportedFiles_.size() << "\n";
    return oss.str();
}

size_t GlobalMap::GetTotalRegistrations() const {
    return Templates_.size() + VariableGroups_.size() + GlobalStyles_.size() + 
           VirtualObjects_.size() + DelegateRegistrations_.size() + ImportedFiles_.size();
}

// === GlobalMapInstance实现 ===

std::unique_ptr<GlobalMap> GlobalMapInstance::Instance_;

GlobalMap& GlobalMapInstance::GetInstance() {
    if (!Instance_) {
        Instance_ = std::make_unique<GlobalMap>();
    }
    return *Instance_;
}

void GlobalMapInstance::ResetInstance() {
    Instance_.reset();
}

} // namespace Chtl