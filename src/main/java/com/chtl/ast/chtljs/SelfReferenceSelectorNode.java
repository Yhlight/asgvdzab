package com.chtl.ast.chtljs;

/**
 * 自引用选择器节点
 * 表示{{&}}语法，用于引用当前元素
 * 在局部脚本块中会自动添加类/ID
 */
public class SelfReferenceSelectorNode extends AbstractCHTLJSASTNode {
    private String autoGeneratedId;      // 自动生成的ID
    private String autoGeneratedClass;   // 自动生成的类名
    private boolean isIdGenerated;       // 是否生成了ID
    private boolean isClassGenerated;    // 是否生成了类名
    
    public SelfReferenceSelectorNode() {
        super(NodeType.ENHANCED_SELECTOR);
    }
    
    @Override
    public void accept(CHTLJSASTVisitor visitor) {
        visitor.visitEnhancedSelector(new EnhancedSelectorNode(getResolvedSelector()));
    }
    
    /**
     * 获取解析后的选择器
     * 如果生成了ID，返回#id
     * 如果生成了类，返回.class
     * 否则返回当前元素标签名
     */
    public String getResolvedSelector() {
        if (isIdGenerated && autoGeneratedId != null) {
            return "#" + autoGeneratedId;
        } else if (isClassGenerated && autoGeneratedClass != null) {
            return "." + autoGeneratedClass;
        }
        // 默认返回自引用符号
        return "&";
    }
    
    // Getters and Setters
    public String getAutoGeneratedId() {
        return autoGeneratedId;
    }
    
    public void setAutoGeneratedId(String autoGeneratedId) {
        this.autoGeneratedId = autoGeneratedId;
        this.isIdGenerated = true;
    }
    
    public String getAutoGeneratedClass() {
        return autoGeneratedClass;
    }
    
    public void setAutoGeneratedClass(String autoGeneratedClass) {
        this.autoGeneratedClass = autoGeneratedClass;
        this.isClassGenerated = true;
    }
    
    public boolean isIdGenerated() {
        return isIdGenerated;
    }
    
    public boolean isClassGenerated() {
        return isClassGenerated;
    }
}