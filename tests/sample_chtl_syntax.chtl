[Configuration]
INDEX_INITIAL_COUNT = 0
DEBUG_MODE = false
KEYWORD_TEXT = "text"
KEYWORD_STYLE = "style"

[Namespace] UI
except [Template]

[Template] @Style DefaultText {
    color: black;
    font-size: 16px;
    font-family: Arial, sans-serif;
}

[Template] @Element Box inherit DefaultText {
    width: 200px;
    height: 100px;
    background-color: #f0f0f0;
    
    text {
        "Default box content"
    }
    
    style {
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    
    script {
        // CHTL JS 增强功能
        {{this}}->listen({
            click: function() {
                console.log("Box clicked!");
                animate({
                    duration: 300,
                    easing: ease-out,
                    begin: { opacity: 1.0 },
                    end: { opacity: 0.5 }
                });
            },
            hover: function() {
                {{.highlight}}[0]->addClass("active");
            }
        });
        
        // 事件委托
        delegate({
            target: "button",
            events: {
                click: handleButtonClick
            }
        });
    }
}

[Custom] @Element AlertBox inherit Box {
    delete width;
    delete height;
    
    replace background-color: #ffeeee;
    
    insert at top {
        border-left: 4px solid #ff4444;
    }
    
    text {
        "Alert: Something happened!"
    }
    
    style {
        color: #cc0000;
        font-weight: bold;
    }
}

[Custom] @Style HeaderText inherit DefaultText {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 16px;
}

[Origin] @Html from "components/base.html"
[Origin] @Style from "styles/reset.css"
[Origin] @JavaScript from "scripts/utils.js"

[Import] @Chtl from "common/ui-components.chtl" as UIComponents
[Import] [Custom] @Element Button from "buttons/button.chtl"

{
    // 根级别的CHTL元素
    @Element HeaderText {
        text { "Welcome to CHTL" }
        
        style {
            text-align: center;
            padding: 20px;
        }
    }
    
    @Element Box {
        id: main-container;
        class: container;
        
        text { "Main content area" }
        
        @Element AlertBox {
            text { "This is an alert message" }
        }
        
        @Element Button {
            text { "Click me" }
            onclick: handleClick;
        }
        
        script {
            function handleClick() {
                // 标准JavaScript和CHTL JS混合
                let box = {{#main-container}};
                box->addClass("clicked");
                
                // 使用CHTL JS动画
                {{.alert-box}}->animate({
                    duration: 500,
                    begin: { transform: "scale(1)" },
                    end: { transform: "scale(1.1)" },
                    when: [
                        { at: 0.5, transform: "scale(1.05)" }
                    ]
                });
            }
            
            // 生成器识别的注释
            -- This will be processed by the generator
            
            /* 多行注释
               包含CHTL JS特性说明 */
        }
    }
}

// 文件级别注释
/* 
 * 这个文件展示了CHTL的所有主要语法特性：
 * - 配置组 [Configuration]
 * - 命名空间 [Namespace] 
 * - 模板 [Template]
 * - 自定义 [Custom] 
 * - 原始嵌入 [Origin]
 * - 导入 [Import]
 * - 元素定义 @Element
 * - 样式定义 @Style  
 * - 变量定义 @Var
 * - 继承 inherit
 * - 特例化操作 delete, insert, replace
 * - 局部样式和脚本
 * - CHTL JS增强选择器 {{selector}}
 * - CHTL JS箭头操作符 ->
 * - CHTL JS特有函数 listen, animate, delegate
 */