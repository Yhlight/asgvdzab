import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

export class CHTLProjectCreator {
    
    public static async create() {
        // Ask for project location
        const folderUri = await vscode.window.showOpenDialog({
            canSelectFolders: true,
            canSelectFiles: false,
            canSelectMany: false,
            openLabel: 'Select Project Folder'
        });
        
        if (!folderUri || folderUri.length === 0) {
            return;
        }
        
        const projectPath = folderUri[0].fsPath;
        
        // Ask for project name
        const projectName = await vscode.window.showInputBox({
            prompt: 'Enter project name',
            placeHolder: 'my-chtl-project',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Project name cannot be empty';
                }
                if (!/^[a-zA-Z0-9-_]+$/.test(value)) {
                    return 'Project name can only contain letters, numbers, hyphens, and underscores';
                }
                return null;
            }
        });
        
        if (!projectName) {
            return;
        }
        
        const fullProjectPath = path.join(projectPath, projectName);
        
        // Check if directory already exists
        if (fs.existsSync(fullProjectPath)) {
            const overwrite = await vscode.window.showWarningMessage(
                `Directory ${projectName} already exists. Overwrite?`,
                'Yes', 'No'
            );
            
            if (overwrite !== 'Yes') {
                return;
            }
        }
        
        // Create project structure
        try {
            await this.createProjectStructure(fullProjectPath, projectName);
            
            // Open the project
            const openInNewWindow = await vscode.window.showInformationMessage(
                `Project ${projectName} created successfully!`,
                'Open in New Window',
                'Open in Current Window',
                'Cancel'
            );
            
            if (openInNewWindow === 'Open in New Window') {
                vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(fullProjectPath), true);
            } else if (openInNewWindow === 'Open in Current Window') {
                vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(fullProjectPath), false);
            }
            
        } catch (error) {
            vscode.window.showErrorMessage(`Failed to create project: ${error}`);
        }
    }
    
    private static async createProjectStructure(projectPath: string, projectName: string) {
        // Create directories
        const directories = [
            projectPath,
            path.join(projectPath, 'src'),
            path.join(projectPath, 'src', 'components'),
            path.join(projectPath, 'src', 'styles'),
            path.join(projectPath, 'src', 'modules'),
            path.join(projectPath, 'dist'),
            path.join(projectPath, 'assets')
        ];
        
        for (const dir of directories) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        }
        
        // Create main CHTL file
        const mainChtl = `// ${projectName} - Main CHTL File
// Generated by CHTL VSCode Extension

// Import UI components
[Import] @Chtl from chtl::ui as ui;

// Define theme variables
[Template] @Var Theme {
    primaryColor: "#007bff";
    secondaryColor: "#6c757d";
    fontFamily: "Arial, sans-serif";
    spacing: "16px";
}

// Main application
body {
    style {
        margin: 0;
        padding: 0;
        font-family: @Var Theme.fontFamily;
        background: #f5f5f5;
    }
    
    @Element Container from ui {
        style {
            padding: @Var Theme.spacing;
        }
        
        header {
            style {
                background: white;
                padding: 20px;
                margin-bottom: @Var Theme.spacing;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            h1 {
                style {
                    color: @Var Theme.primaryColor;
                    margin: 0;
                }
                text { ${projectName} }
            }
            
            p {
                style {
                    color: @Var Theme.secondaryColor;
                    margin: 10px 0 0 0;
                }
                text { Welcome to your new CHTL project! }
            }
        }
        
        main {
            style {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            p {
                text { Start editing src/main.chtl to build your application. }
            }
            
            @Element Button from ui {
                style {
                    @Style PrimaryButton from ui;
                    margin-top: @Var Theme.spacing;
                }
                text { Get Started }
                
                script {
                    let btn = {{#button}};
                    btn->listen("click", () => {
                        alert("Happy coding with CHTL!");
                    });
                }
            }
        }
    }
}
`;
        
        fs.writeFileSync(path.join(projectPath, 'src', 'main.chtl'), mainChtl);
        
        // Create a sample component
        const headerComponent = `// Header Component

[Namespace] components {
    [Template] @Element Header {
        header {
            class: "app-header";
            style {
                background: #333;
                color: white;
                padding: 15px 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            div {
                class: "logo";
                style {
                    font-size: 20px;
                    font-weight: bold;
                }
                text { \${logo || "CHTL App"} }
            }
            
            nav {
                ul {
                    style {
                        list-style: none;
                        margin: 0;
                        padding: 0;
                        display: flex;
                        gap: 20px;
                    }
                    
                    li {
                        a {
                            href: "#";
                            style {
                                color: white;
                                text-decoration: none;
                                
                                &:hover {
                                    text-decoration: underline;
                                }
                            }
                            text { Home }
                        }
                    }
                    
                    li {
                        a {
                            href: "#about";
                            style {
                                color: white;
                                text-decoration: none;
                                
                                &:hover {
                                    text-decoration: underline;
                                }
                            }
                            text { About }
                        }
                    }
                }
            }
        }
    }
}
`;
        
        fs.writeFileSync(path.join(projectPath, 'src', 'components', 'header.chtl'), headerComponent);
        
        // Create .gitignore
        const gitignore = `# Dependencies
node_modules/

# Build output
dist/
*.html
*.css
*.js

# IDE
.vscode/
.idea/

# Logs
*.log

# OS
.DS_Store
Thumbs.db
`;
        
        fs.writeFileSync(path.join(projectPath, '.gitignore'), gitignore);
        
        // Create README
        const readme = `# ${projectName}

A CHTL (Custom HyperText Language) project.

## Getting Started

1. Open this project in Visual Studio Code
2. Install the CHTL Language Support extension
3. Open \`src/main.chtl\`
4. Use Ctrl+Shift+P and run "CHTL: Compile Current File"

## Project Structure

\`\`\`
${projectName}/
├── src/
│   ├── main.chtl        # Main application file
│   ├── components/       # Reusable components
│   ├── styles/          # Style templates
│   └── modules/         # Custom modules
├── dist/                # Compiled output
├── assets/              # Static assets
└── README.md
\`\`\`

## Commands

- **Compile**: \`Ctrl+Shift+P\` → "CHTL: Compile Current File"
- **Preview**: \`Ctrl+Shift+P\` → "CHTL: Show Preview"
- **Compile All**: \`Ctrl+Shift+P\` → "CHTL: Compile All Files"

## Learn More

Visit the [CHTL documentation](https://chtl-lang.org/docs) to learn more about CHTL.
`;
        
        fs.writeFileSync(path.join(projectPath, 'README.md'), readme);
        
        // Create VSCode settings
        const vscodeDir = path.join(projectPath, '.vscode');
        if (!fs.existsSync(vscodeDir)) {
            fs.mkdirSync(vscodeDir);
        }
        
        const settings = {
            "chtl.compiler.outputPath": "./dist",
            "chtl.compiler.mode": "development",
            "chtl.compiler.autoSave": true,
            "files.associations": {
                "*.chtl": "chtl"
            }
        };
        
        fs.writeFileSync(
            path.join(vscodeDir, 'settings.json'),
            JSON.stringify(settings, null, 4)
        );
    }
}